{{ define "upstream" }}
	#Acces through rancher managed network
	server {{.IP}}:{{.PORT}};
{{ end }}

{{range $host, $conts := host.Containers | groupByMulti "rap.host" ","}}
{{range $cont := $conts }}
{{ if eq $cont.Service "" }}

upstream {{ $host }} {
{{- $addrLen := len $cont.Ports }}
        {{- if eq $addrLen 1 }}
	        {{- $intport := (first $cont.Ports).InternalPort }}
	        {{- template "upstream" (dict "IP" $cont.Address "PORT" $intport) }}
	        {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var, falling back to standard web port 80 */}}
	    {{- else }}
		    {{- $port := .Labels.GetValue "rap.port" "80" }}
		    {{- template "upstream" (dict "IP" $cont.Address "PORT" $port) }}
	    {{- end }}
}

{{- $default_host := or (env "DEFAULT_HOST") "" }}
{{- $default_server := index (dict $host "" $default_host "default_server") $host }}

{{- $proto := $cont.Labels.GetValue "rap.proto" "http"  }}
{{- $https_method := $cont.Labels.GetValue "rap.https_method" "redirect" }}

{{- $vhostCert := (closest (dirList "/etc/nginx/certs") (printf "%s.crt" $host))}}

{{- $vhostCert := trimSuffix $vhostCert ".crt" }}
{{- $vhostCert := trimSuffix $vhostCert ".key" }}

{{- $cert := $cont.Labels.GetValue "rap.cert_name" $vhostCert }}

{{- $is_https := (and (ne $cert "") (exists (printf "/etc/nginx/certs/%s.crt" $cert)) (exists (printf "/etc/nginx/certs/%s.key" $cert))) }}

{{- if $is_https }}

{{- if eq $https_method "redirect" }} 
server {
	server_name {{ $host }};
	listen 80 {{ $default_server }};
	access_log /var/log/nginx/access.log vhost;
	return 301 https://$host$request_uri;
}
{{- end}}

server {
	server_name {{ $host }};
	listen 443 ssl http2 {{ $default_server }};
	access_log /var/log/nginx/access.log vhost;

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';

	ssl_prefer_server_ciphers on;
	ssl_session_timeout 5m;
	ssl_session_cache shared:SSL:50m;
	ssl_session_tickets off;

	ssl_certificate /etc/nginx/certs/{{ (printf "%s.crt" $cert) }};
	ssl_certificate_key /etc/nginx/certs/{{ (printf "%s.key" $cert) }};

	{{- if (exists (printf "/etc/nginx/certs/%s.dhparam.pem" $cert)) }}
	ssl_dhparam {{ printf "/etc/nginx/certs/%s.dhparam.pem" $cert }};
	{{- end }}

	{{- if (ne $https_method "noredirect") }}
	add_header Strict-Transport-Security "max-age=31536000";
	{{- end }}

	{{- if (exists (printf "/etc/nginx/vhost.d/%s" $host)) }}
	include {{ printf "/etc/nginx/vhost.d/%s" $host }};
	{{- else if (exists "/etc/nginx/vhost.d/default") }}
	include /etc/nginx/vhost.d/default;
	{{- end }}

	location / {
		{{- if eq $proto "uwsgi" }}
		include uwsgi_params;
		uwsgi_pass {{ trim $proto }}://{{ trim $host }};
		{{- else }}
		proxy_pass {{ trim $proto }}://{{ trim $host }};
		{{- end }}
		{{- if (exists (printf "/etc/nginx/htpasswd/%s" $host)) }}
		auth_basic	"Restricted {{ $host }}";
		auth_basic_user_file	{{ (printf "/etc/nginx/htpasswd/%s" $host) }};
		{{- end }}
        {{- if (exists (printf "/etc/nginx/vhost.d/%s_location" $host)) }}
        include {{ printf "/etc/nginx/vhost.d/%s_location" $host}};
        {{- else if (exists "/etc/nginx/vhost.d/default_location") }}
        include /etc/nginx/vhost.d/default_location;
        {{- end }}
	}
}

{{ end -}}


{{- if or (not $is_https) (eq $https_method "noredirect") -}}

server {
	server_name {{ $host }};
	listen 80 {{ $default_server }};
	access_log /var/log/nginx/access.log vhost;

	{{- if (exists (printf "/etc/nginx/vhost.d/%s" $host)) }}
	include {{ printf "/etc/nginx/vhost.d/%s" $host }};
	{{- else if (exists "/etc/nginx/vhost.d/default") }}
	include /etc/nginx/vhost.d/default;
	{{- end }}

	location / {
		{{- if eq $proto "uwsgi" }}
		include uwsgi_params;
		uwsgi_pass {{ trim $proto }}://{{ trim $host }};
		{{- else }}
		proxy_pass {{ trim $proto }}://{{ trim $host }};
		{{- end }}
		{{- if (exists (printf "/etc/nginx/htpasswd/%s" $host)) }}
		auth_basic	"Restricted {{ $host }}";
		auth_basic_user_file	{{ (printf "/etc/nginx/htpasswd/%s" $host) }};
		{{- end }}
        {{- if (exists (printf "/etc/nginx/vhost.d/%s_location" $host)) }}
        include {{ printf "/etc/nginx/vhost.d/%s_location" $host}};
        {{- else if (exists "/etc/nginx/vhost.d/default_location") }}
        include /etc/nginx/vhost.d/default_location;
        {{- end }}
	}
}

{{- if (and (not $is_https) (exists "/etc/nginx/certs/default.crt") (exists "/etc/nginx/certs/default.key")) }}

server {
	server_name {{ $host }};
	listen 443 ssl http2 {{ $default_server }};
	access_log /var/log/nginx/access.log vhost;
	return 500;

	ssl_certificate /etc/nginx/certs/default.crt;
	ssl_certificate_key /etc/nginx/certs/default.key;
}
{{- end -}}

{{- end }}
{{- end }}
{{- end }}
{{- end }}